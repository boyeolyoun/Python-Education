import threading
import time

# Shared Memory variables
CAPACITY = 10
buffer = [-1 for i in range(CAPACITY)]
in_index = 0
out_index = 0

# Declaring Semaphores
mutex = threading.Semaphore()
empty = threading.Semaphore(CAPACITY)
full = threading.Semaphore(0)

# Producer Thread Class
class Producer(threading.Thread):
  def run(self):
    
    global CAPACITY, buffer, in_index, out_index
    global mutex, empty, full
    
    items_produced = 0
    counter = 0
    
    while items_produced < 20:
      empty.acquire()
      mutex.acquire()
      
      counter += 1
      buffer[in_index] = counter
      in_index = (in_index + 1)%CAPACITY
      print("Producer produced : ", counter)
      
      mutex.release()
      full.release()
      
      time.sleep(1)
      
      items_produced += 1

# Consumer Thread Class
class Consumer(threading.Thread):
  def run(self):
    
    global CAPACITY, buffer, in_index, out_index, counter
    global mutex, empty, full
    
    items_consumed = 0
    
    while items_consumed < 20:
      full.acquire()
      mutex.acquire()
      
      item = buffer[out_index]
      out_index = (out_index + 1)%CAPACITY
      print("Consumer consumed item : ", item)
      
      mutex.release()
      empty.release()      
      
      time.sleep(2.5)
      
      items_consumed += 1

# Creating Threads
producer = Producer()
consumer = Consumer()

# Starting Threads
consumer.start()
producer.start()

# Waiting for threads to complete
producer.join()
consumer.join()

+++++++++++++++++++

# SuperFastPython.com
# example of one producer and one consumer with threads
from time import sleep
from random import random
from threading import Thread
from queue import Queue
 
# producer task
def producer(queue):
    print('Producer: Running')
    # generate items
    for i in range(10):
        # generate a value
        value = random()
        # block, to simulate effort
        sleep(value)
        # create a tuple
        item = (i, value)
        # add to the queue
        queue.put(item)
        # report progress
        print(f'>producer added {item}')
    # signal that there are no further items
    queue.put(None)
    print('Producer: Done')
 
# consumer task
def consumer(queue):
    print('Consumer: Running')
    # consume items
    while True:
        # get a unit of work
        item = queue.get()
        # check for stop
        if item is None:
            break
        # block, to simulate effort
        sleep(item[1])
        # report
        print(f'>consumer got {item}')
    # all done
    print('Consumer: Done')
 
# create the shared queue
queue = Queue()
# start the consumer
consumer = Thread(target=consumer, args=(queue,))
consumer.start()
# start the producer
producer = Thread(target=producer, args=(queue,))
producer.start()
# wait for all threads to finish
producer.join()
consumer.join()
